'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Application_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Application"));
const File_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/File"));
class FileUploadController {
    async upload({ request, response, session, }) {
        try {
            const uploads = request.files('files', {
                types: ['image', 'video', 'pdf'],
                size: '10mb',
                multiple: true,
            });
            if (!uploads || !uploads.length) {
                session.flash({ error: 'No files uploaded.' });
                return response.redirect('back');
            }
            const uploadDir = Application_1.default.tmpPath('uploads');
            for (let file of uploads) {
                await file.move(uploadDir, {
                    name: `${file.clientName}.${new Date().getTime()}.${file.extname}`,
                    overwrite: true,
                });
                const newFile = new File_1.default();
                newFile.name = file.clientName;
                newFile.path = `${uploadDir}/${file.clientName}.${new Date().getTime()}.${file.extname}`;
                await newFile.save();
            }
            session.flash({ success: uploadDir });
            return response.redirect('back');
        }
        catch (error) {
            session.flash({ error: error.message });
            return response.redirect('back');
        }
    }
}
module.exports = FileUploadController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsZVVwbG9hZENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJGaWxlVXBsb2FkQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7O0FBQ2IsZ0dBQXNEO0FBRXRELGlGQUFrQztBQUVsQyxNQUFNLG9CQUFvQjtJQUN6QixLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEdBQUc7UUFDMUMsSUFBSTtZQUNGLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO2dCQUNyQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQztnQkFDaEMsSUFBSSxFQUFFLE1BQU07Z0JBQ1osUUFBUSxFQUFFLElBQUk7YUFDZixDQUFDLENBQUM7WUFHSCxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtnQkFDL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxvQkFBb0IsRUFBRSxDQUFDLENBQUM7Z0JBQy9DLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNsQztZQUdELE1BQU0sU0FBUyxHQUFHLHFCQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRWpELEtBQUssSUFBSSxJQUFJLElBQUksT0FBTyxFQUFFO2dCQUN4QixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO29CQUN6QixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtvQkFDbEUsU0FBUyxFQUFFLElBQUk7aUJBQ2hCLENBQUMsQ0FBQTtnQkFHRixNQUFNLE9BQU8sR0FBRyxJQUFJLGNBQUksRUFBRSxDQUFBO2dCQUMxQixPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUE7Z0JBQzlCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsR0FBRyxTQUFTLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtnQkFDeEYsTUFBTSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUE7YUFDckI7WUFFRCxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7WUFDdEMsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2xDO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQ3hDLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNsQztJQUNILENBQUM7Q0FDRDtBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsb0JBQW9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgQXBwbGljYXRpb24gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9BcHBsaWNhdGlvbidcbmltcG9ydCBSb3V0ZSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL1JvdXRlJ1xuaW1wb3J0IEZpbGUgZnJvbSAnQXBwL01vZGVscy9GaWxlJ1xuXG5jbGFzcyBGaWxlVXBsb2FkQ29udHJvbGxlciB7XG4gYXN5bmMgdXBsb2FkKHsgcmVxdWVzdCwgcmVzcG9uc2UsIHNlc3Npb24sIH0pIHtcbiAgIHRyeSB7XG4gICAgIGNvbnN0IHVwbG9hZHMgPSByZXF1ZXN0LmZpbGVzKCdmaWxlcycsIHtcbiAgICAgICB0eXBlczogWydpbWFnZScsICd2aWRlbycsICdwZGYnXSwgLy8gQWRqdXN0IHRoZSBmaWxlIHR5cGVzIGFzIG5lZWRlZFxuICAgICAgIHNpemU6ICcxMG1iJywgLy8gQWRqdXN0IHRoZSBtYXhpbXVtIGZpbGUgc2l6ZSBhbGxvd2VkXG4gICAgICAgbXVsdGlwbGU6IHRydWUsIC8vIEFsbG93IG11bHRpcGxlIGZpbGVzXG4gICAgIH0pO1xuXG4gICAgIC8vIENoZWNrIGlmIGFueSBmaWxlcyB3ZXJlIHVwbG9hZGVkXG4gICAgIGlmICghdXBsb2FkcyB8fCAhdXBsb2Fkcy5sZW5ndGgpIHtcbiAgICAgICBzZXNzaW9uLmZsYXNoKHsgZXJyb3I6ICdObyBmaWxlcyB1cGxvYWRlZC4nIH0pO1xuICAgICAgIHJldHVybiByZXNwb25zZS5yZWRpcmVjdCgnYmFjaycpO1xuICAgICB9XG5cbiAgICAgLy8gTW92ZSB1cGxvYWRlZCBmaWxlcyB0byBhIHNwZWNpZmljIGRpcmVjdG9yeVxuICAgICBjb25zdCB1cGxvYWREaXIgPSBBcHBsaWNhdGlvbi50bXBQYXRoKCd1cGxvYWRzJyk7XG5cbiAgICAgZm9yIChsZXQgZmlsZSBvZiB1cGxvYWRzKSB7XG4gICAgICAgYXdhaXQgZmlsZS5tb3ZlKHVwbG9hZERpciwge1xuICAgICAgICAgbmFtZTogYCR7ZmlsZS5jbGllbnROYW1lfS4ke25ldyBEYXRlKCkuZ2V0VGltZSgpfS4ke2ZpbGUuZXh0bmFtZX1gLFxuICAgICAgICAgb3ZlcndyaXRlOiB0cnVlLCAvLyBPdmVyd3JpdGUgZXhpc3RpbmcgZmlsZXMgd2l0aCB0aGUgc2FtZSBuYW1lXG4gICAgICAgfSlcblxuICAgICAgIC8vIENyZWF0ZSBhIG5ldyBGaWxlIGluc3RhbmNlIGFuZCBzYXZlIGl0IHRvIHRoZSBkYXRhYmFzZVxuICAgICAgIGNvbnN0IG5ld0ZpbGUgPSBuZXcgRmlsZSgpXG4gICAgICAgbmV3RmlsZS5uYW1lID0gZmlsZS5jbGllbnROYW1lXG4gICAgICAgbmV3RmlsZS5wYXRoID0gYCR7dXBsb2FkRGlyfS8ke2ZpbGUuY2xpZW50TmFtZX0uJHtuZXcgRGF0ZSgpLmdldFRpbWUoKX0uJHtmaWxlLmV4dG5hbWV9YFxuICAgICAgIGF3YWl0IG5ld0ZpbGUuc2F2ZSgpXG4gICAgIH1cblxuICAgICBzZXNzaW9uLmZsYXNoKHsgc3VjY2VzczogdXBsb2FkRGlyIH0pO1xuICAgICByZXR1cm4gcmVzcG9uc2UucmVkaXJlY3QoJ2JhY2snKTtcbiAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgIHNlc3Npb24uZmxhc2goeyBlcnJvcjogZXJyb3IubWVzc2FnZSB9KTtcbiAgICAgcmV0dXJuIHJlc3BvbnNlLnJlZGlyZWN0KCdiYWNrJyk7XG4gICB9XG4gfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZpbGVVcGxvYWRDb250cm9sbGVyO1xuIl19